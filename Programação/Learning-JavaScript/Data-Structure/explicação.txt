As estrutura de dados nada mais são do que uma forma de estrutura os dados de uma aplicação, elas definem a organização, métodos de acesso e opções de processamento para os dados da sua aplicação. A estrutura de dados é muito importante e suas definições devem ser projetadas e organizadas pelo desenvolvedor/desenvolvedores da aplicação, é também definido a API que será usada usada na estrutura, ou seja, quais procedimentos que serão usados para a manipulação dos dados.

CLASSIFICAÇÃO DAS ESTRUTURAS:
    1. Estruturas de dados lineares: Arrays, stacks(pilhas), filas, linked Lists (listas vinculadas), hashTable (tabela hash) e outras;
    2. Estruturas de dados não lineares: binaryTree(árvores binárias), graph(grafos);

ESTRUTURAS DE DADOS LINEARES:  É uma estrutura de dado que organiza os dados de forma sequencial ou linearmente, onde os elementos são anexados ao seu adjacente anterior e ao próximo da estrutura, isso se da o nome de estrutura de dados linear.

   1. ARRAY: Array é uma estrutura de dado básica que na maioria das linguagens de programação armazena apenas um tipo de dado (INT, STRING, BOOLEANO e etc). O array armazena os seus elementos dentro de índices, esses índices ajuda a localizar o elemento dentro do array

   2. STACK(PILHA): É uma estrutura de dados que como o proprio nome diz, armazena em pilhas os dados. Ela segue a regra LIFO(Last In First Out ou em português, último a entrar, primeiro a sair). O primeiro item que é adicionado a pilha se torna a último a sair, pois após ser adicionado outros dados, o primeiro item acaba se tornando a base da pilha. O contrário acontece, o último item adicionado a pilha, sempre vai ser o primeiro a sair, pois se encotrará no topo da pilha.  

   3. QUEUE(FILA): Fila é uma estrutura de dados muito parecida com a pilha, a sua unica diferença a ordem de retirada dos elementos. Utilizando a regra FIFO(Firs In First Out, em português, Primeiro a entrar, primeiro a sair). A fila começa a remover os dados a partir do primeiro dado que foi armazenado na estrutura, um exemplo é a fila de um banco, a primeira pessoa ao entrar na fila, será a primeira a ser atendida, a mesma coisa acontece com a fila. Mas em um computador, a fila os elementos da fila não se movem para outra posição após um elemento ser retirado, na realidade, o que acontece é que é indicado a posição do elemento dentro de um vetor.

   4. LIST(LISTAS): A lista é uma estrutura de dado bastrata que implementa uma coleção ordenada de elementos. Uma lista pode ser implementada estaticamente, que apenas verifica e enumera os elementos. Já uma lista dinâmica ou mutável permite a adição, substituição ou remoção de elementos durante a existência da lista, como uma lista encadeada,duplamente encadeada ou circular.

   5. HASH TABLE(TABELA HASH): A tabela hash pode ser considerada uma estrutura de dados linear e também não linear, pois irá depender da maneira que uma colisão é tratada. A tabela hash tem como sua principal tarefa melhorar a eficiência de busca apartir de uma chave associada ao elemento que será armazenado. E essa eficiência em buscas se dá pelo possível acesso direto pela chave que foi associada ao elemento, e com esse acesso direto ao elemento, e uma boa implementação da mesma, ela pode ter uma complexidade constante (O(1)) que torna a eficiência excelente para buscas. 
   Sua implementação será com vetores de determinado tamanho, e para cada elemento que desejamos armazenar na tabela, será gerado um índice. Para que seja gerado esse índice aonde será armazenado o elemento, vai ser preciso também gerar uma chave de um tipo especifíco e dividir essa chave pelo tamanho da tabela, com o resto dessa divisão sendo o índice.

   Exemplo: 
    chave = 914018
    tamanho da tabela = 8

    914018 % 8 = 2

   Nesse exemplo foi dividido a chave pelo tamanho do array, e essa divisão terminou com um resto dois, e agora o elemento associado a chave, será armazenado no índice 2 do vetor. Como dito anteriormente, existem casos de colisões de índices, aonde várias chaves pode gerar o mesmo índice; E por conta dessas colisões tanto a implementação quanto a sua eficiência pode variar. Por isso deve se ter muito cuidado ao implementar uma tabela hash, pois qualquer deslize em sua implementação é passível de torna sua eficiência precária e tornar o uso da tabela inviável.


ESTRUTURAS DE DADOS NÃO LINEARES: As estruturas não lineares, são estruturas aonde não se tem uma organização sequêncial ou linear, onde cada novo elemento pode ser armazenado em blocos de memórias distintos sem ter alguma ligação sequêncial. E por disso, essas estruturas se tornam mais complexas de serem implementadas, pois irá precisar de uma lógica que de um bom controle a estrutura.

   1. TREES AND BINARYTREE(ÁRVORES E ÁRVORES BINÁRIAS): As árvores é uma estrutura de dados não linear que trabalha com os dados de forma hierárquica. A árvore armazena os elementos em conjuntos dque são chamados de nós ou nodes, e toda árvore possui o nó raiz que será o nó presente no topo da árvore. Apartir desse nó raiz, será feita ligações com outros nós apartir de arestas, essas arestas irá demonstrar o nível hierárquico de um nó para outro, sendo o nó superior o PAI e o nó inferior o FILHO. Se mais de dois nós possuem o mesmo PAI, eles irão ser chamados de IRMÃOS. Cada nó PAI é uma nova árvore que será uma SUB-ÁRVORE da raiz principal e os nós vazios sendo chamados de FOLHAS.
   A árvore binária é o tipo de árvore que é usado como estrutura de dados. Na árvore binária cada nó pai só poderá possuir de zero a dois nós filhos, e ela é amplamente utilizada para implementar árvores de busca binária, que irá faciliar e dar uma boa eficiência na busca de elementos.
